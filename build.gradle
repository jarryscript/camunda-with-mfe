plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.2'
	id 'io.spring.dependency-management' version '1.1.2'
	id 'jacoco'
	id "org.sonarqube" version "4.3.0.3225"
}


group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation group: 'org.camunda.bpm.springboot', name: 'camunda-bpm-spring-boot-starter', version: '7.20.0-alpha4'
	implementation group: 'cn.hutool', name: 'hutool-jwt', version: '5.8.21'
	compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.28'
	annotationProcessor 'org.projectlombok:lombok:1.18.28'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation group: 'com.aliyun.oss', name: 'aliyun-sdk-oss', version: '3.17.1'

	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

test {
	finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
	reports {
		xml.required = false
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.5
			}
		}

		rule {
			enabled = false
			element = 'CLASS'
			includes = ['org.gradle.*']

			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 0.3
			}
		}
	}
}

sonar {
	properties {
		property("sonar.projectKey", "ptah")
		property("sonar.host.url", "http://localhost:10086")
		property("sonar.login", "admin")
		property("sonar.password", "admin123")
	}
}

tasks.withType(Tar){
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(Zip){
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
